{"version":3,"sources":["../app.js"],"names":["ExpressApp","config","title","version","port","logger","console","write","log","routes","undefined","publicDirectory","start","cluster","isMaster","started","Array","os","cpus","length","fill","forEach","fork","on","worker","info","id","address","masterTask","workerTask","app","use","express","json","urlencoded","extended","path","join","__dirname","stream","req","res","next","header","server","listen","process","env","PORT","setTimeout","Object","assign"],"mappings":"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","sourcesContent":["\nimport express from 'express'\nimport path from 'path'\nimport cookieParser from 'cookie-parser'\nimport morgan from 'morgan'\nimport cluster from 'cluster'\nimport os from 'os'\n\n/** ExpressApp Class to create and start an Express Application */\nexport default class ExpressApp {\n  config = {\n    title: 'ExpressApp',\n    version: '',\n    port: 3000,\n    logger: {...console, write: console.log},\n    routes: undefined,\n    publicDirectory: 'public'\n  }\n\n  /**\n   * Constructor\n   * @param {{\n   *     title: string,\n   *     version: string,\n   *     port: number,\n   *     logger: {\n   *         write: (message?: any, ...optionalParams: any[]): void,\n   *         info: (message?: any, ...optionalParams: any[]): void,\n   *         error: (message?: any, ...optionalParams: any[]): void,\n   *         debug: (message?: any, ...optionalParams: any[]): void,\n   *         warn: (message?: any, ...optionalParams: any[]): void\n   *     };\n   *     routes: (app: express): void,\n   *     publicDirectory: string\n   * }} config \n   */\n  constructor(config){\n    Object.assign(this.config, config)\n  }\n\n  start = () => {\n    if (cluster.isMaster) {\n      let started = 0\n      Array(os.cpus().length).fill().forEach(() => cluster.fork())\n      cluster.on('exit', worker => this.config.logger.info(`Module #${worker.id} has exitted.`))\n      cluster.on('online', worker => this.config.logger.info(`Start module #${worker.id}`))\n      cluster.on('listening', (worker, address) => {\n        this.config.logger.info(`Module #${worker.id} started and listening on port ${address.port}`)\n        if(++started == os.cpus().length){\n          this.masterTask()\n        }\n      })\n    } else {\n      this.workerTask()\n    }\n  }\n\n  masterTask = () => {\n    this.config.logger.info(`${this.config.title} ${this.config.version} started`)\n    this.config.logger.info(`URL : http://localhost:${this.config.port}`)\n  }\n\n  workerTask = () => {\n    var app = express()\n    app.use(\n      express.json(),\n      express.urlencoded({ extended: false }),\n      express.static(path.join(__dirname, this.config.publicDirectory)),\n      cookieParser(),\n      morgan('tiny', {stream: this.config.logger}),\n      (req, res, next) => {\n        res.header('Access-Control-Allow-Origin', '*')\n        res.header('Access-Control-Allow-Headers', '*')\n        next()\n      }\n    )\n    this.config.routes(app)\n    let server = app.listen(process.env.PORT || this.config.port)\n    server.setTimeout(500000)\n  }\n}"],"file":"app.js"}